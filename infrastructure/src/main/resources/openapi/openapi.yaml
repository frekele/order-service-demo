openapi: 3.0.4

info:
  title: "Order Service API"
  description: "API for order management, as specified in the technical challenge."
  version: "1.0.0-SNAPSHOT"

servers:
  - url: "http://localhost:8080"
    description: "Local development server"

tags:
  - name: "Orders"
    description: "Operations related to orders"

paths:
  /orders:
    post:
      tags:
        - "Orders"
      summary: "Creates a new order"
      description: "Receives new order data, processes it, and saves it in the system."
      operationId: "createOrder"
      requestBody:
        description: "JSON object containing the data for the new order to be created."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: "Order created successfully."
        '400':
          description: "Invalid request (e.g., missing or incorrectly formatted fields)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: "Conflict. An order with the same 'externalOrderId' already exists."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - "Orders"
      summary: "Lists all orders with filters"
      description: "Returns a paginated list of orders. Allows filtering by status and externalOrderId."
      operationId: "listOrders"
      parameters:
        - name: status
          in: query
          description: "Filter orders by their status."
          required: false
          schema:
            type: string
            enum: [ RECEIVED, PROCESSING, COMPLETED, FAILED, CANCELLED ]
        - name: externalOrderId
          in: query
          description: "Find an order by its external ID."
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: "Page number for pagination."
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: "Number of items per page."
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: "A paginated list of orders."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'

  /orders/{id}:
    get:
      tags:
        - "Orders"
      summary: "Finds an order by its ID"
      description: "Returns the details of a single order, including its items, total value, and status."
      operationId: "getOrderById"
      parameters:
        - name: id
          in: path
          description: "The internal UUID of the order."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: "Order not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{id}/cancel:
    delete:
      tags:
        - "Orders"
      summary: "Cancels an order"
      description: "Cancels an order, if the business rules allow (e.g., if it has not yet been completed)."
      operationId: "cancelOrder"
      parameters:
        - name: id
          in: path
          description: "The internal UUID of the order to be cancelled."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: "Order cancelled successfully."
        '404':
          description: "Order not found."
        '409':
          description: "Conflict. The order cannot be cancelled in its current state."

  /orders/{id}/retry:
    post:
      tags:
        - "Orders"
      summary: "Retries a failed order"
      description: "Triggers a new attempt to process an order that is in a 'FAILED' state."
      operationId: "retryOrder"
      parameters:
        - name: id
          in: path
          description: "The internal UUID of the order to be retried."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: "Retry request accepted. The order is being re-processed."
        '404':
          description: "Order not found."
        '409':
          description: "Conflict. The order is not in a 'FAILED' state and cannot be retried."

components:
  schemas:
    CreateOrderRequest:
      type: object
      properties:
        externalOrderId:
          type: string
          description: "The unique ID of the order from the external system A."
          example: "123456789"
        items:
          type: array
          description: "The list of items that make up the order."
          items:
            $ref: '#/components/schemas/OrderItemRequest'
      required:
        - externalOrderId
        - items

    OrderItemRequest:
      type: object
      properties:
        productCode:
          type: string
          description: "Unique product code."
          example: "P001"
        productName:
          type: string
          description: "Name of the product."
          example: "Example Product A"
        quantity:
          type: integer
          description: "Quantity of the product in the order."
          example: 2
        unitPrice:
          type: number
          description: "Unit price of the product."
          example: 29.99
      required:
        - productCode
        - quantity
        - unitPrice

    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        externalOrderId:
          type: string
        totalValue:
          type: number
          format: double
        status:
          type: string
          enum: [ RECEIVED, PROCESSING, COMPLETED, FAILED, CANCELLED ]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'

    OrderItemResponse:
      type: object
      properties:
        productCode:
          type: string
        productName:
          type: string
        quantity:
          type: integer
        unitPrice:
          type: number

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: "The timestamp when the error occurred."
        status:
          type: integer
          description: "The HTTP status code."
        error:
          type: string
          description: "The HTTP error description (e.g., 'Bad Request')."
        message:
          type: string
          description: "A detailed message about the error."
        path:
          type: string
          description: "The API path that was invoked."